version: 2.1

references:
  images:
    go: &GOLANG_IMAGE cimg/go:1.14
    python: &PYTHON_IMAGE circleci/python:2.7-stretch
    ruby: &RUBY_IMAGE cimg/ruby:2.6.5
    ci_machine: &CI_MACHINE_IMAGE ubuntu-1604:202004-01

  paths:
    test-results: &TEST_RESULTS_DIR bin

  environment: &ENVIRONMENT
    TEST_RESULTS_DIR: *TEST_RESULTS_DIR
    GIT_EMAIL : "zup-ci@zup.com.br"
    GIT_USERNAME: "zup-ci"
    GIT_NAME: "Zup CI"
    BUILD_IMAGE: *GOLANG_IMAGE

  filters: &FILTERS_DELIVERY
    branches:
      only:
        - /^release-.*/
        - qa

  filters-release: &FILTERS_RELEASE
    branches:
      only:
        - /^release-.*/

  filters-checks: &FILTERS_CHECK
    branches:
      only:
        - master
        - /^release-.*/
        - qa
        - /^pull\/.*$/
        - /^feature.*/

executors:
  ritchie-tests-executor:
    machine:
      image: *CI_MACHINE_IMAGE
    working_directory: ~/workspace

  ritchie-executor:
    docker:
      - image: *GOLANG_IMAGE
        user: root
    working_directory: /workspace

  delivery-executor:
    docker:
      - image: *PYTHON_IMAGE
        user: root
    working_directory: /workspace

  release-executor:
    docker:
      - image: *RUBY_IMAGE
        user: root
    working_directory: /workspace

jobs:
  # Runs Go linters
  lint:
    executor: ritchie-executor
    steps:
      - checkout
      - run:
          name: Install golangci-lint
          command: |
            download=https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh
            wget -O- -q $download | sh -s -- -b /go/bin/ v1.24.0
      - run: go mod download
      - run:
          name: lint
          command: |
            /go/bin/golangci-lint run

  unit_test:
    executor: ritchie-tests-executor
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - run:
          name: Check go version
          command: |
            . ./go-version.sh
      - run:
          name: Install gotestsum
          command: |
            curl -sSL "https://github.com/gotestyourself/gotestsum/releases/download/v0.4.2/gotestsum_0.4.2_linux_amd64.tar.gz" | sudo tar -xz -C /usr/local/bin gotestsum
      - run:
          name: Run docker-compose
          command: |
            docker-compose up -d
      - run:
          name: Running Unit tests
          command: |
            mkdir -p $TEST_RESULTS_DIR
            . ./run-tests-ci.sh
      - store_test_results:
          path: *TEST_RESULTS_DIR
      - store_artifacts:
          path: *TEST_RESULTS_DIR
      - run:
          name: codecov upload
          when: always
          command: bash <(curl -s https://codecov.io/bash)

  functional_test_single:
    executor: ritchie-executor
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - attach_workspace:
            at: /workspace/dist
      - run:
          name: Setup Bash for Single
          command: |
            echo "export PATH=/workspace/dist/linux/single:$PATH" >> $BASH_ENV
            source /home/circleci/.bashrc
      - run: |
          echo $PATH
      - run:
          name: Running Functional tests for single
          command: |
            make functional-test-single


  functional_test_team:
    executor: ritchie-executor
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - attach_workspace:
          at: /workspace/dist
      - run:
          name: Setup Bash for Team
          command: |
            echo "export PATH=/workspace/dist/linux/team:$PATH" >> $BASH_ENV
            source /home/circleci/.bashrc
      - run: |
          echo $PATH
      - run:
          name: Running Functional tests for team
          command: |
            make functional-test-team

  build:
    executor: ritchie-executor
    branches:
    steps:
      - checkout
      - run:
          name: Running build
          command: |
            . ./version.sh
            make build-circle
      - persist_to_workspace:
          root: dist
          paths:
            - linux
            - darwin
            - windows
      - store_test_results:
          path: *TEST_RESULTS_DIR
      - store_artifacts:
          path: *TEST_RESULTS_DIR

  delivery:
    executor: delivery-executor
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - attach_workspace:
          at: /workspace/dist
      - run:
          name: Delivering cli binary
          command: |
            pip install awscli
            . ./version.sh
            . ./bucket.sh
            . ./credentials.sh
            make delivery

  release:
    environment:
      <<: *ENVIRONMENT
    executor: release-executor
    steps:
      - checkout
      - run:
          name: Releasing
          command: |
            . ./version.sh
            make release

workflows:
  build-for-branch:
    jobs:
      - lint:
          filters:
            <<: *FILTERS_CHECK
      - unit_test:
          filters:
            <<: *FILTERS_CHECK
      - build:
          filters:
            <<: *FILTERS_CHECK
          requires:
            - unit_test
            - lint
      - functional_test_single:
          filters:
            <<: *FILTERS_CHECK
          requires:
            - build
      - functional_test_team:
          filters:
            <<: *FILTERS_CHECK
          requires:
            - build
      - delivery:
          filters:
            <<: *FILTERS_DELIVERY
          requires:
            - build
      - release:
          filters:
            <<: *FILTERS_RELEASE
          requires:
            - build

