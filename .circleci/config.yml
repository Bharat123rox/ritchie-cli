version: 2.1

orbs:
  windows: circleci/windows@2.4.0

references:
  images:
    go: &GOLANG_IMAGE cimg/go:1.14
    python: &PYTHON_IMAGE circleci/python:2.7-stretch
    ruby: &RUBY_IMAGE cimg/ruby:2.6.5
    horus: &HORUS_IMAGE library/docker:dind
  paths:
    test-results: &TEST_RESULTS_DIR bin

  environment: &ENVIRONMENT
    TEST_RESULTS_DIR: *TEST_RESULTS_DIR
    GIT_EMAIL : "zup-ci@zup.com.br"
    GIT_USERNAME: "zup-ci"
    GIT_NAME: "Zup CI"

  filters: &FILTERS_DELIVERY
    branches:
      only:
        - /^release-.*/
        - qa
        - nightly
        - beta

  filters-release: &FILTERS_RELEASE
    branches:
      only:
        - /^release-.*/

  filters-checks: &FILTERS_CHECK
    branches:
      only:
        - master
        - /^release-.*/
        - nightly
        - beta

  filters-checks-pr: &FILTERS_CHECK_CODE
    branches:
      only:
        - qa
        - /^pull\/.*$/
        - /^feature.*/

executors:
  ritchie-executor:
    docker:
      - image: *GOLANG_IMAGE
        user: root
    working_directory: /workspace

  horus-executor:
    docker:
      - image: *HORUS_IMAGE
        user: root

  delivery-executor:
    docker:
      - image: *PYTHON_IMAGE
        user: root
    working_directory: /workspace

  release-executor:
    docker:
      - image: *RUBY_IMAGE
        user: root
    working_directory: /workspace

  windows-executor:
    working_directory: /workspace
    resource_class: windows.medium
    shell: powershell.exe -ExecutionPolicy Bypass
    machine:
      image: windows-server-2019

jobs:
  lint:
    executor: ritchie-executor
    steps:
      - checkout
      - run:
          name: Install golangci-lint
          command: |
            download=https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh
            wget -O- -q $download | sh -s -- -b /go/bin/ v1.24.0
      - run:
          name: lint
          command: |
            go mod download
            /go/bin/golangci-lint run

  horus:
    executor: horus-executor
    environment:
      <<: *ENVIRONMENT
    steps:
      - setup_remote_docker
      - run:
          name: Horus Security Analysis
          command: |
            echo "Starting scan Horus..."
            docker run --rm -e HORUS_CLIENT_REPO_URL=$HORUS_CLIENT_REPO_URL \
            -e HORUS_CLIENT_REPO_BRANCH=$HORUS_CLIENT_REPO_BRANCH \
            -e HORUS_CLIENT_API_ADDR=$HORUS_CLIENT_API_ADDR \
            -e HORUS_CLIENT_TOKEN=$HORUS_CLIENT_TOKEN \
            -e HORUS_CLIENT_API_USE_HTTPS=$HORUS_CLIENT_API_USE_HTTPS \
            -e HORUS_VULNERABILITY_CHECK=$HORUS_VULNERABILITY_CHECK horuszup/horus-client:latest

  unit_test:
    executor: ritchie-executor
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - run:
          name: Running Unit tests
          command: |
            mkdir -p $TEST_RESULTS_DIR
            go mod download
            PACKAGE_NAMES=$(go list ./pkg/... | circleci tests split --split-by=timings --timings-type=classname)
            echo "Running $(echo $PACKAGE_NAMES | wc -w) packages"
            echo $PACKAGE_NAMES
            gotestsum --format=short-verbose \
              --junitfile $TEST_RESULTS_DIR/gotestsum-report.xml -- \
              -p 2 \
              -cover -coverprofile=coverage.txt \
              $PACKAGE_NAMES
      - store_test_results:
          path: *TEST_RESULTS_DIR
      - store_artifacts:
          path: *TEST_RESULTS_DIR
      - run:
          name: codecov upload
          when: always
          command: bash <(curl -s https://codecov.io/bash)

  unix_functional_test_single:
    executor: ritchie-executor
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - attach_workspace:
            at: /workspace/dist
      - run:
          name: Setup Bash for Single
          command: |
            echo "export PATH=/workspace/dist/linux/single:$PATH" >> $BASH_ENV
            source /home/circleci/.bashrc
      - run:
          name: Running Functional tests for single
          command: |
            go mod download
            make functional-test-single

  unix_functional_test_team:
    executor: ritchie-executor
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - attach_workspace:
          at: /workspace/dist
      - run:
          name: Setup Bash for Team
          command: |
            echo "export PATH=/workspace/dist/linux/team:$PATH" >> $BASH_ENV
            source /home/circleci/.bashrc
      - run:
          name: Running Functional tests for team
          command: |
            go mod download
            make functional-test-team

  windows_functional_test_team:
    executor: windows-executor
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - attach_workspace:
          at: /workspace/dist
      - run:
          name: Install GO
          command: |
            choco install -y golang
      - run:
          name: Running Functional tests for team
          command: |
            $Env:path +=";C:\workspace\workspace\dist\windows\team;"; go test -v (go list ./functional/team/... | grep -v vendor/)

  windows_functional_test_single:
    executor: windows-executor
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - attach_workspace:
          at: /workspace/dist
      - run:
          name: Install GO
          command: |
            choco install -y golang
      - run:
          name: Running Functional tests for single
          command: |
            $Env:path +=";C:\workspace\workspace\dist\windows\single;"; go test -v (go list ./functional/single/... | grep -v vendor/)

  build:
    executor: ritchie-executor
    branches:
    steps:
      - checkout
      - run:
          name: Running build
          command: |
            . ./.circleci/scripts/version.sh
            go mod download
            make build-circle
      - persist_to_workspace:
          root: dist
          paths:
            - linux
            - darwin
            - windows
      - store_test_results:
          path: *TEST_RESULTS_DIR
      - store_artifacts:
          path: *TEST_RESULTS_DIR

  delivery:
    executor: delivery-executor
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - attach_workspace:
          at: /workspace/dist
      - run:
          name: Delivering cli binary
          command: |
            pip install awscli
            . ./.circleci/scripts/version.sh
            . ./.circleci/scripts/bucket.sh
            . ./.circleci/scripts/credentials.sh
            make delivery

  release:
    environment:
      <<: *ENVIRONMENT
    executor: release-executor
    steps:
      - checkout
      - run:
          name: Releasing
          command: |
            . ./.circleci/scripts/version.sh
            make release

  rebase_nightly:
    environment:
      <<: *ENVIRONMENT
    executor: release-executor
    steps:
      - checkout
      - run:
          name: Rebase Nightly
          command: |
            make rebase-nightly

workflows:
  nightly:
    triggers:
      - schedule:
          cron: "0 22 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - rebase_nightly

  build-for-branch:
    jobs:
      - lint:
          filters:
            <<: *FILTERS_CHECK_CODE
      - horus:
          filters:
            <<: *FILTERS_CHECK_CODE
          requires:
            - lint
      - unit_test:
         name: unit-test
         filters:
           <<: *FILTERS_CHECK_CODE
         requires:
           - horus
      - build:
          name: build-code
          filters:
            <<: *FILTERS_CHECK_CODE
          requires:
            - unit-test
      - unix_functional_test_single:
          name: unix-functional-test-single-code
          filters:
            <<: *FILTERS_CHECK_CODE
          requires:
            - build-code
      - unix_functional_test_team:
          name: unix-functional-test-team-code
          filters:
            <<: *FILTERS_CHECK_CODE
          requires:
            - build-code
      - windows_functional_test_team:
          name: windows-functional-test-team-code
          filters:
            <<: *FILTERS_CHECK_CODE
          requires:
            - build-code
      - windows_functional_test_single:
          name: windows-functional-test-single-code
          filters:
            <<: *FILTERS_CHECK_CODE
          requires:
            - build-code
      - delivery:
          name: delivery
          filters:
            <<: *FILTERS_DELIVERY
          requires:
            - unix-functional-test-single-code
            - unix-functional-test-team-code
            - windows-functional-test-single-code
            - windows-functional-test-team-code
      - release:
          name: release
          filters:
            <<: *FILTERS_RELEASE
          requires:
            - delivery